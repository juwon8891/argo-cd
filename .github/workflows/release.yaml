name: Test GoReleaser

on:
  push:
    tags:
      - 'v*'
      - '!v2.4*'
      - '!v2.5*'
      - '!v2.6*'

jobs:
  goreleaser:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Golang
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Fetch all tags
        run: git fetch --force --tags
      - name: Set GORELEASER_PREVIOUS_TAG
        run: |
          set -xue
      
          # 현재 태그가 RC인지 확인
          if echo ${{ github.ref_name }} | grep -E -- '-rc[0-9]+$'; then
            # RC 태그라면, 바로 이전 태그를 찾음
            PREVIOUS_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?$' | grep -v "^${{ github.ref_name }}" | head -n 1)
          else
            # 정식 릴리즈라면, 이전 마이너 버전의 마지막 태그 찾기
            CURRENT_VERSION=$(echo ${{ github.ref_name }} | grep -oP '^v\K[0-9]+\.[0-9]+')
            MAJOR_VERSION=$(echo $CURRENT_VERSION | cut -d'.' -f1)
            MINOR_VERSION=$(echo $CURRENT_VERSION | cut -d'.' -f2)
      
            if [ "$MINOR_VERSION" -gt 0 ]; then
              PREVIOUS_MINOR_VERSION=$((MINOR_VERSION - 1))
              # 이전 마이너 버전의 마지막 태그 찾기 (예: v2.12.x)
              PREVIOUS_TAG=$(git tag --sort=-v:refname | grep -E "^v${MAJOR_VERSION}\.${PREVIOUS_MINOR_VERSION}\.[0-9]+$" | head -n 1)
            fi
      
            # 만약 이전 마이너 버전 태그가 없을 경우, 가장 최근의 이전 버전 태그를 찾음
            if [ -z "$PREVIOUS_TAG" ]; then
              PREVIOUS_TAG=$(git tag --sort=-v:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | grep -vE "^v${MAJOR_VERSION}\.${MINOR_VERSION}\.[0-9]+$" | head -n 1)
            fi
          fi
      
          # GORELEASER_PREVIOUS_TAG 설정
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "GORELEASER_PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV
          else
            echo "No previous tag found, using GoReleaser defaults."
          fi
      

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest
          args: release --clean --timeout 55m
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
