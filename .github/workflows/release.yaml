name: Test GoReleaser

on:
  push:
    tags:
      - 'v*'
      - '!v2.4*'
      - '!v2.5*'
      - '!v2.6*'

jobs:
  goreleaser:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Golang
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Fetch all tags
        run: git fetch --force --tags
      - name: Set GORELEASER_PREVIOUS_TAG
        run: |
          set -xue
      
          # 현재 태그에서 주 버전과 부 버전, 패치 버전 추출 (예: v2.13.1 -> 2, 13, 1)
          CURRENT_TAG=${{ github.ref_name }}
          MAJOR_VERSION=$(echo $CURRENT_TAG | cut -d'.' -f1 | cut -d'v' -f2)
          MINOR_VERSION=$(echo $CURRENT_TAG | cut -d'.' -f2)
          PATCH_VERSION=$(echo $CURRENT_TAG | cut -d'.' -f3 | cut -d'-' -f1)
      
          if [ "$PATCH_VERSION" -gt 0 ]; then
            # 패치 릴리스라면, 같은 마이너 버전의 마지막 태그 찾기 (예: v2.13.1 -> v2.13.0)
            PREVIOUS_TAG=$(git tag --sort=-v:refname | grep -E "^v${MAJOR_VERSION}\.${MINOR_VERSION}\.[0-9]+$" | grep -v "^${CURRENT_TAG}$" | head -n 1)
          else
            # 새로운 마이너 버전 릴리스라면, 이전 마이너 버전의 마지막 태그 찾기 (예: v2.14.0 -> v2.13.x)
            if [ "$MINOR_VERSION" -gt 0 ]; then
              PREVIOUS_MINOR_VERSION=$((MINOR_VERSION - 1))
              PREVIOUS_TAG=$(git tag --sort=-v:refname | grep -E "^v${MAJOR_VERSION}\.${PREVIOUS_MINOR_VERSION}\.[0-9]+$" | head -n 1)
            fi
          fi
      
          # 만약 태그를 찾지 못한 경우, 이전 메이저 버전의 가장 최근 태그를 찾기
          if [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$(git tag --sort=-v:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | grep -vE "^${CURRENT_TAG}$" | head -n 1)
          fi
      
          # GORELEASER_PREVIOUS_TAG 설정
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "GORELEASER_PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV
          else
            echo "No previous tag found, using GoReleaser defaults."
          fi
      
      
          # GORELEASER_PREVIOUS_TAG 설정
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "GORELEASER_PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV
          else
            echo "No previous tag found, using GoReleaser defaults."
          fi
      

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest
          args: release --clean --timeout 55m
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
